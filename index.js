const { Client, GatewayIntentBits, EmbedBuilder, ApplicationCommandType, UserSelectMenuBuilder, ActionRowBuilder, MessageFlags, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

client.once('ready', async () => {
    console.log(`\x1b[1m\x1b[32mLOGGED IN AS ${client.user.tag}\x1b[0m`);

    const commands = [
        {
            name: "dm-message",
            description: "[ üí¨‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ù‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ]",
            type: ApplicationCommandType.ChatInput,
        }
    ];

    await client.application.commands.set(commands);
    console.log(`\x1b[34mSUCCESSFULLY!\x1b[0m ÂΩ° INFO :„Äê STATUS: \x1b[32mLOGIN BOT\x1b[0m, WORKING: \x1b[35mOKAY READY LET'S GO!\x1b[0m „Äë`);
});

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;
    if (interaction.commandName === 'dm-message') {

        const embed = new EmbedBuilder()
            .setColor(0x66FF00)
            .setTitle('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤')
            .setDescription(`\`\`\`Íî´üí¨ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\`\`\``)
            .setThumbnail(interaction.user.displayAvatarURL())
            .setImage('https://www.animatedimages.org/data/media/562/animated-line-image-0168.gif')
        const row = new ActionRowBuilder()
            .addComponents(
                new UserSelectMenuBuilder()
                    .setCustomId('select_user')
                    .setPlaceholder('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤')
                    .setMinValues(1)
                    .setMaxValues(1)
            );

        await interaction.reply({ embeds: [embed], components: [row], flags: MessageFlags.Ephemeral });
    }
});


client.on('interactionCreate', async (interaction) => {
    if (interaction.isUserSelectMenu() && interaction.customId === 'select_user') {
        const selectedUserId = interaction.values[0];
        const modal = new ModalBuilder()
            .setCustomId(`submituser_modals:${selectedUserId}`)
            .setTitle('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô')
            .addComponents(
                new ActionRowBuilder().addComponents(
                    new TextInputBuilder()
                        .setCustomId('message_send')
                        .setLabel('[ üí¨‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á ]')
                        .setStyle(TextInputStyle.Paragraph)
                        .setPlaceholder('‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πà')
                        .setRequired(true)
                ),
                new ActionRowBuilder().addComponents(
                    new TextInputBuilder()
                        .setCustomId('link_send')
                        .setLabel('[ üîó‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ]')
                        .setStyle(TextInputStyle.Short)
                        .setPlaceholder('https://image.png')
                        .setRequired(false)
                )
            );
        await interaction.showModal(modal);
    }
});

client.on('interactionCreate', async (interaction) => {
    if (interaction.isModalSubmit() && interaction.customId.startsWith('submituser_modals:')) {
        const selectedUserId = interaction.customId.split(':')[1];
        const user = await client.users.fetch(selectedUserId);
        const message_send = interaction.fields.getTextInputValue("message_send");
        const link_send = interaction.fields.getTextInputValue("link_send");

        if (link_send && !link_send.startsWith('https://')) {
            return await interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setColor(0xFF0000)
                        .setTitle('\`\`‚ùå\`\` ‡πÄ‡∏≠‡πâ‡∏∞! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Ñ‡πå URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!!')
                        .setDescription(`\`\`\`‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û https://image.png\`\`\``)
                ],
                flags: MessageFlags.Ephemeral
            });
        }
        
        const embeds_send = new EmbedBuilder()
            .setColor(0x5865f2)
            .setTitle(`\`\`‚úÖ\`\`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!`)
            .setDescription(`\`\`üê§\`\` **‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°** <@${interaction.user.id}>\n\`\`üåµ\`\` **‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°** <@${user.id}>\n\`\`üí¨\`\` **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á**\`\`\`${message_send}\`\`\``)
            .setThumbnail(`${user.displayAvatarURL()}`);
        if (link_send) {
            embeds_send.setImage(link_send);
        }

        await interaction.reply({ embeds: [embeds_send], flags: MessageFlags.Ephemeral });

        try {
            const embeds_user = new EmbedBuilder()
            .setColor(0x5865f2)
            .setTitle(`\`\`üí¨\`\`‡∏°‡∏µ‡∏Ñ‡∏ô‡∏ù‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì!`)
            .setDescription(`\`\`üí¨\`\` **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ù‡∏≤‡∏Å‡∏ñ‡∏∂‡∏á**\`\`\`${message_send}\`\`\``);
        
            if (link_send) {
                embeds_user.setImage(link_send);
            }
            
            await user.send({ embeds: [embeds_user] });
        } catch (error) {
            const embeds = new EmbedBuilder()
                .setColor(0xFF0000)
                .setTitle(`\`\`‚ùå\`\`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!`)
                .setDescription(`‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡πÄ‡∏Ç‡∏≤‡∏õ‡∏¥‡∏î DM ‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ!!`);
            await interaction.followUp({ embeds: [embeds], flags: MessageFlags.Ephemeral });
        }
    }
});


require("dotenv").config();
const { Client, GatewayIntentBits } = require("discord.js");

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent],
});

client.once("ready", () => {
  console.log(`‚úÖ ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß! ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó: ${client.user.tag}`);
});

client.login(process.env.DISCORD_TOKEN);
